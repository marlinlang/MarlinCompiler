module examples;

internal class Vector3
{
    public double X;
    public double Y;
    public double Z;
    
    public static examples::Vector3 Zero = new examples::Vector3(0, 0, 0); 
    
    public constructor(double x, double y, double z)
    {
        X = x;
        Y = y;
        Z = z;
    }
    
    public static examples::Vector3 operator+(examples::Vector3 left, examples::Vector3 right)
    {
        return new examples::Vector3(
            left.X + right.X,
            left.Y + right.Y,
            left.Z + right.Z
        );
    }
    
    public static examples::Vector3 operator-(examples::Vector3 left, examples::Vector3 right)
    {
        return new examples::Vector3(
            left.X - right.X,
            left.Y - right.Y,
            left.Z - right.Z
        );
    }
    
    public static examples::Vector3 operator*(examples::Vector3 left, examples::Vector3 right)
    {
        return new examples::Vector3(
            left.X * right.X,
            left.Y * right.Y,
            left.Z * right.Z
        );
    }
    
    public static examples::Vector3 operator/(examples::Vector3 left, examples::Vector3 right)
    {
        return new examples::Vector3(
            left.X / right.X,
            left.Y / right.Y,
            left.Z / right.Z
        );
    }
    
    public static examples::Vector3 operator==(examples::Vector3 left, examples::Vector3 right)
    {
        return left.X == right.X
            && left.Y == right.Y
            && left.Z == right.Z;
    }
}