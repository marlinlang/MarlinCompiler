//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Projects/Marlin/MarlinCompiler/src\MarlinParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MarlinCompiler.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class MarlinParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACES=1, MODULE=2, CLASS=3, STRUCT=4, RETURN=5, NEW=6, NATIVE=7, 
		NULL=8, TRUE=9, FALSE=10, PRIVATE=11, INTERNAL=12, PUBLIC=13, STATIC=14, 
		READONLY=15, SEALED=16, DOT=17, COMMA=18, COLON=19, SEMICOLON=20, LBRACE=21, 
		RBRACE=22, LPAREN=23, RPAREN=24, LBRACKET=25, RBRACKET=26, ASSIGN=27, 
		DOUBLE_QUOTE=28, DOUBLE_COLON=29, ARROW=30, IDENTIFIER=31, INTEGER=32, 
		NORMAL_STRING=33, DOUBLE=34;
	public const int
		RULE_file = 0, RULE_typeName = 1, RULE_moduleName = 2, RULE_modifier = 3, 
		RULE_expectArgs = 4, RULE_expectArg = 5, RULE_giveArgs = 6, RULE_statement = 7, 
		RULE_expression = 8, RULE_typeDeclaration = 9, RULE_classDeclaration = 10, 
		RULE_structDeclaration = 11, RULE_methodDeclaration = 12, RULE_methodCall = 13, 
		RULE_variableDeclaration = 14, RULE_localVariableDeclaration = 15, RULE_variableAssignment = 16, 
		RULE_memberAccess = 17, RULE_arrayInitializer = 18, RULE_return = 19, 
		RULE_classMember = 20, RULE_structMember = 21, RULE_methodBody = 22, RULE_booleanLiteral = 23, 
		RULE_stringLiteral = 24, RULE_numberLiteral = 25;
	public static readonly string[] ruleNames = {
		"file", "typeName", "moduleName", "modifier", "expectArgs", "expectArg", 
		"giveArgs", "statement", "expression", "typeDeclaration", "classDeclaration", 
		"structDeclaration", "methodDeclaration", "methodCall", "variableDeclaration", 
		"localVariableDeclaration", "variableAssignment", "memberAccess", "arrayInitializer", 
		"return", "classMember", "structMember", "methodBody", "booleanLiteral", 
		"stringLiteral", "numberLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'module'", "'class'", "'struct'", "'return'", "'new'", "'native'", 
		"'null'", "'true'", "'false'", "'private'", "'internal'", "'public'", 
		"'static'", "'readonly'", "'sealed'", "'.'", "','", "':'", "';'", "'{'", 
		"'}'", "'('", "')'", "'['", "']'", "'='", "'\"'", "'::'", "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACES", "MODULE", "CLASS", "STRUCT", "RETURN", "NEW", "NATIVE", 
		"NULL", "TRUE", "FALSE", "PRIVATE", "INTERNAL", "PUBLIC", "STATIC", "READONLY", 
		"SEALED", "DOT", "COMMA", "COLON", "SEMICOLON", "LBRACE", "RBRACE", "LPAREN", 
		"RPAREN", "LBRACKET", "RBRACKET", "ASSIGN", "DOUBLE_QUOTE", "DOUBLE_COLON", 
		"ARROW", "IDENTIFIER", "INTEGER", "NORMAL_STRING", "DOUBLE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MarlinParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MarlinParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MarlinParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MarlinParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleNameContext moduleName() {
			return GetRuleContext<ModuleNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MarlinParser.Eof, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MODULE) {
					{
					State = 52;
					moduleName();
					State = 56;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << STRUCT) | (1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC) | (1L << READONLY) | (1L << SEALED))) != 0)) {
						{
						{
						State = 53;
						typeDeclaration();
						}
						}
						State = 58;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(MarlinParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(MarlinParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOUBLE_COLON() { return GetTokens(MarlinParser.DOUBLE_COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_COLON(int i) {
			return GetToken(MarlinParser.DOUBLE_COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(MarlinParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(MarlinParser.RBRACKET, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		return typeName(0);
	}

	private TypeNameContext typeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeNameContext _localctx = new TypeNameContext(Context, _parentState);
		TypeNameContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_typeName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 65;
			Match(IDENTIFIER);
			State = 70;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 66;
					Match(DOUBLE_COLON);
					State = 67;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 72;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 78;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeName);
					State = 73;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 74;
					Match(LBRACKET);
					State = 75;
					Match(RBRACKET);
					}
					} 
				}
				State = 80;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ModuleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(MarlinParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MarlinParser.SEMICOLON, 0); }
		public ModuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleNameContext moduleName() {
		ModuleNameContext _localctx = new ModuleNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_moduleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(MODULE);
			State = 82;
			typeName(0);
			State = 83;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(MarlinParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(MarlinParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(MarlinParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READONLY() { return GetToken(MarlinParser.READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(MarlinParser.SEALED, 0); }
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC) | (1L << READONLY) | (1L << SEALED))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpectArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MarlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MarlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpectArgContext[] expectArg() {
			return GetRuleContexts<ExpectArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpectArgContext expectArg(int i) {
			return GetRuleContext<ExpectArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MarlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MarlinParser.COMMA, i);
		}
		public ExpectArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expectArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpectArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpectArgsContext expectArgs() {
		ExpectArgsContext _localctx = new ExpectArgsContext(Context, State);
		EnterRule(_localctx, 8, RULE_expectArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(LPAREN);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 88;
				expectArg();
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 89;
					Match(COMMA);
					State = 90;
					expectArg();
					}
					}
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 98;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpectArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MarlinParser.IDENTIFIER, 0); }
		public ExpectArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expectArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpectArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpectArgContext expectArg() {
		ExpectArgContext _localctx = new ExpectArgContext(Context, State);
		EnterRule(_localctx, 10, RULE_expectArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			typeName(0);
			State = 101;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GiveArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MarlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MarlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MarlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MarlinParser.COMMA, i);
		}
		public GiveArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_giveArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGiveArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GiveArgsContext giveArgs() {
		GiveArgsContext _localctx = new GiveArgsContext(Context, State);
		EnterRule(_localctx, 12, RULE_giveArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(LPAREN);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << LPAREN) | (1L << IDENTIFIER) | (1L << INTEGER) | (1L << NORMAL_STRING) | (1L << DOUBLE))) != 0)) {
				{
				State = 104;
				expression();
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 105;
					Match(COMMA);
					State = 106;
					expression();
					}
					}
					State = 111;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 114;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MarlinParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				methodCall();
				State = 117;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				localVariableDeclaration();
				State = 120;
				Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 122;
				variableAssignment();
				State = 123;
				Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 125;
				@return();
				State = 126;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MarlinParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MarlinParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_expression);
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				Match(LPAREN);
				State = 131;
				expression();
				State = 132;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134;
				methodCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 135;
				memberAccess(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 136;
				booleanLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 137;
				stringLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 138;
				numberLiteral();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 139;
				arrayInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeDeclaration);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 142;
				classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143;
				structDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MarlinParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MarlinParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MarlinParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MarlinParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MarlinParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberContext[] classMember() {
			return GetRuleContexts<ClassMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberContext classMember(int i) {
			return GetRuleContext<ClassMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MarlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MarlinParser.COMMA, i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC) | (1L << READONLY) | (1L << SEALED))) != 0)) {
				{
				{
				State = 146;
				modifier();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 152;
			Match(CLASS);
			State = 153;
			Match(IDENTIFIER);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 154;
				Match(COLON);
				State = 155;
				typeName(0);
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 156;
					Match(COMMA);
					State = 157;
					typeName(0);
					}
					}
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 165;
			Match(LBRACE);
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC) | (1L << READONLY) | (1L << SEALED) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 166;
				classMember();
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 172;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(MarlinParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MarlinParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MarlinParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MarlinParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext[] structMember() {
			return GetRuleContexts<StructMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext structMember(int i) {
			return GetRuleContext<StructMemberContext>(i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC) | (1L << READONLY) | (1L << SEALED))) != 0)) {
				{
				{
				State = 174;
				modifier();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 180;
			Match(STRUCT);
			State = 181;
			Match(IDENTIFIER);
			State = 182;
			Match(LBRACE);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC) | (1L << READONLY) | (1L << SEALED) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 183;
				structMember();
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 189;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MarlinParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC) | (1L << READONLY) | (1L << SEALED))) != 0)) {
				{
				{
				State = 191;
				modifier();
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 197;
			typeName(0);
			State = 198;
			Match(IDENTIFIER);
			State = 199;
			methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GiveArgsContext giveArgs() {
			return GetRuleContext<GiveArgsContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 26, RULE_methodCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			memberAccess(0);
			State = 202;
			giveArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MarlinParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE() { return GetToken(MarlinParser.NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MarlinParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC) | (1L << READONLY) | (1L << SEALED))) != 0)) {
				{
				{
				State = 204;
				modifier();
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 210;
			typeName(0);
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NATIVE) {
				{
				State = 211;
				Match(NATIVE);
				}
			}

			State = 214;
			Match(IDENTIFIER);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 215;
				Match(ASSIGN);
				State = 216;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MarlinParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MarlinParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			typeName(0);
			State = 220;
			Match(IDENTIFIER);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 221;
				Match(ASSIGN);
				State = 222;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MarlinParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			memberAccess(0);
			State = 226;
			Match(ASSIGN);
			State = 227;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MarlinParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MarlinParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(MarlinParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(MarlinParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext[] memberAccess() {
			return GetRuleContexts<MemberAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAccessContext memberAccess(int i) {
			return GetRuleContext<MemberAccessContext>(i);
		}
		public MemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessContext memberAccess() {
		return memberAccess(0);
	}

	private MemberAccessContext memberAccess(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MemberAccessContext _localctx = new MemberAccessContext(Context, _parentState);
		MemberAccessContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_memberAccess, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 233;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 230;
					typeName(0);
					State = 231;
					Match(DOT);
					}
					break;
				}
				State = 235;
				Match(IDENTIFIER);
				State = 240;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 236;
					Match(LBRACKET);
					State = 237;
					expression();
					State = 238;
					Match(RBRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 242;
				Match(IDENTIFIER);
				State = 247;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 243;
					Match(LBRACKET);
					State = 244;
					expression();
					State = 245;
					Match(RBRACKET);
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 256;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MemberAccessContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_memberAccess);
					State = 251;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 252;
					Match(DOT);
					State = 253;
					memberAccess(3);
					}
					} 
				}
				State = 258;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(MarlinParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(MarlinParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(MarlinParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(MarlinParser.RBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MarlinParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MarlinParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MarlinParser.COMMA, i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 36, RULE_arrayInitializer);
		int _la;
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259;
				Match(NEW);
				State = 260;
				typeName(0);
				State = 261;
				Match(LBRACKET);
				State = 262;
				expression();
				State = 263;
				Match(RBRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265;
				Match(NEW);
				State = 266;
				typeName(0);
				State = 267;
				Match(LBRACKET);
				State = 268;
				Match(RBRACKET);
				State = 269;
				Match(LBRACE);
				State = 270;
				expression();
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 271;
					Match(COMMA);
					State = 272;
					expression();
					}
					}
					State = 277;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 278;
				Match(RBRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MarlinParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 38, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(RETURN);
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << LPAREN) | (1L << IDENTIFIER) | (1L << INTEGER) | (1L << NORMAL_STRING) | (1L << DOUBLE))) != 0)) {
				{
				State = 283;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MarlinParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public ClassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberContext classMember() {
		ClassMemberContext _localctx = new ClassMemberContext(Context, State);
		EnterRule(_localctx, 40, RULE_classMember);
		try {
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 286;
				variableDeclaration();
				State = 287;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289;
				methodDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MarlinParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public StructMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructMemberContext structMember() {
		StructMemberContext _localctx = new StructMemberContext(Context, State);
		EnterRule(_localctx, 42, RULE_structMember);
		try {
			State = 296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				variableDeclaration();
				State = 293;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295;
				methodDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpectArgsContext expectArgs() {
			return GetRuleContext<ExpectArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(MarlinParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MarlinParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MarlinParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MarlinParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_methodBody);
		int _la;
		try {
			State = 313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298;
				expectArgs();
				State = 299;
				Match(ARROW);
				State = 300;
				expression();
				State = 301;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303;
				expectArgs();
				State = 304;
				Match(LBRACE);
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==RETURN || _la==IDENTIFIER) {
					{
					{
					State = 305;
					statement();
					}
					}
					State = 310;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 311;
				Match(RBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MarlinParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MarlinParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 46, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMAL_STRING() { return GetToken(MarlinParser.NORMAL_STRING, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 48, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(NORMAL_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MarlinParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MarlinParser.DOUBLE, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarlinParserVisitor<TResult> typedVisitor = visitor as IMarlinParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 50, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==DOUBLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return typeName_sempred((TypeNameContext)_localctx, predIndex);
		case 17: return memberAccess_sempred((MemberAccessContext)_localctx, predIndex);
		}
		return true;
	}
	private bool typeName_sempred(TypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool memberAccess_sempred(MemberAccessContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '$', '\x144', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x39', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '<', '\v', '\x2', '\x5', '\x2', 
		'>', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x41', '\n', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'G', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', 'J', '\v', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', 'O', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', 'R', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', '^', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '\x61', '\v', '\x6', '\x5', '\x6', '\x63', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'n', '\n', '\b', '\f', 
		'\b', '\xE', '\b', 'q', '\v', '\b', '\x5', '\b', 's', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x83', '\n', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x8F', 
		'\n', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x93', '\n', '\v', 
		'\x3', '\f', '\a', '\f', '\x96', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\x99', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', '\xA1', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\xA4', '\v', '\f', '\x5', '\f', '\xA6', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\a', '\f', '\xAA', '\n', '\f', '\f', '\f', '\xE', 
		'\f', '\xAD', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\a', 
		'\r', '\xB2', '\n', '\r', '\f', '\r', '\xE', '\r', '\xB5', '\v', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xBB', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\xBE', '\v', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\a', '\xE', '\xC3', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\xC6', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\a', '\x10', '\xD0', '\n', '\x10', '\f', '\x10', '\xE', '\x10', 
		'\xD3', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xD7', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xDC', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\xE2', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\xEC', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xF3', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\xFA', '\n', '\x13', '\x5', '\x13', '\xFC', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', 
		'\x101', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x104', '\v', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', 
		'\x114', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x117', '\v', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x11B', '\n', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x11F', '\n', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x125', '\n', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x12B', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\a', '\x18', '\x135', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x138', 
		'\v', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x13C', '\n', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x2', '\x4', '\x4', '$', '\x1C', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x2', '\x5', '\x4', '\x2', '\r', '\r', 
		'\xF', '\x12', '\x3', '\x2', '\v', '\f', '\x4', '\x2', '\"', '\"', '$', 
		'$', '\x2', '\x153', '\x2', '@', '\x3', '\x2', '\x2', '\x2', '\x4', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'S', '\x3', '\x2', '\x2', '\x2', '\b', 
		'W', '\x3', '\x2', '\x2', '\x2', '\n', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x66', '\x3', '\x2', '\x2', '\x2', '\xE', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x82', '\x3', '\x2', '\x2', '\x2', '\x12', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x92', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x18', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xC4', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xD1', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\"', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xFB', '\x3', '\x2', '\x2', '\x2', '&', '\x11A', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x11C', '\x3', '\x2', '\x2', '\x2', '*', '\x124', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x30', '\x13D', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x34', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x36', ':', '\x5', '\x6', '\x4', '\x2', '\x37', 
		'\x39', '\x5', '\x14', '\v', '\x2', '\x38', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x39', '<', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '>', '\x3', '\x2', 
		'\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '=', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '?', '\x41', '\a', '\x2', '\x2', '\x3', '@', 
		'=', '\x3', '\x2', '\x2', '\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '\x3', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\b', '\x3', 
		'\x1', '\x2', '\x43', 'H', '\a', '!', '\x2', '\x2', '\x44', '\x45', '\a', 
		'\x1F', '\x2', '\x2', '\x45', 'G', '\a', '!', '\x2', '\x2', '\x46', '\x44', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'J', '\x3', '\x2', '\x2', '\x2', 'H', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 
		'I', 'P', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\f', '\x4', '\x2', '\x2', 'L', 'M', '\a', '\x1B', '\x2', '\x2', 
		'M', 'O', '\a', '\x1C', '\x2', '\x2', 'N', 'K', '\x3', '\x2', '\x2', '\x2', 
		'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\x4', '\x2', 
		'\x2', 'T', 'U', '\x5', '\x4', '\x3', '\x2', 'U', 'V', '\a', '\x16', '\x2', 
		'\x2', 'V', '\a', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\t', '\x2', '\x2', 
		'\x2', 'X', '\t', '\x3', '\x2', '\x2', '\x2', 'Y', '\x62', '\a', '\x19', 
		'\x2', '\x2', 'Z', '_', '\x5', '\f', '\a', '\x2', '[', '\\', '\a', '\x14', 
		'\x2', '\x2', '\\', '^', '\x5', '\f', '\a', '\x2', ']', '[', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x61', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'Z', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'\x1A', '\x2', '\x2', '\x65', '\v', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\x5', '\x4', '\x3', '\x2', 'g', 'h', '\a', '!', '\x2', '\x2', 'h', 
		'\r', '\x3', '\x2', '\x2', '\x2', 'i', 'r', '\a', '\x19', '\x2', '\x2', 
		'j', 'o', '\x5', '\x12', '\n', '\x2', 'k', 'l', '\a', '\x14', '\x2', '\x2', 
		'l', 'n', '\x5', '\x12', '\n', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 
		'n', 'q', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 
		'q', 'o', '\x3', '\x2', '\x2', '\x2', 'r', 'j', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\a', '\x1A', '\x2', '\x2', 'u', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\x5', '\x1C', '\xF', '\x2', 'w', 'x', '\a', '\x16', 
		'\x2', '\x2', 'x', '\x83', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x5', 
		' ', '\x11', '\x2', 'z', '{', '\a', '\x16', '\x2', '\x2', '{', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '|', '}', '\x5', '\"', '\x12', '\x2', '}', 
		'~', '\a', '\x16', '\x2', '\x2', '~', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '\x80', '\x5', '(', '\x15', '\x2', '\x80', '\x81', '\a', '\x16', 
		'\x2', '\x2', '\x81', '\x83', '\x3', '\x2', '\x2', '\x2', '\x82', 'v', 
		'\x3', '\x2', '\x2', '\x2', '\x82', 'y', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'|', '\x3', '\x2', '\x2', '\x2', '\x82', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x11', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\a', 
		'\x19', '\x2', '\x2', '\x85', '\x86', '\x5', '\x12', '\n', '\x2', '\x86', 
		'\x87', '\a', '\x1A', '\x2', '\x2', '\x87', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x8F', '\x5', '\x1C', '\xF', '\x2', '\x89', '\x8F', '\x5', 
		'$', '\x13', '\x2', '\x8A', '\x8F', '\x5', '\x30', '\x19', '\x2', '\x8B', 
		'\x8F', '\x5', '\x32', '\x1A', '\x2', '\x8C', '\x8F', '\x5', '\x34', '\x1B', 
		'\x2', '\x8D', '\x8F', '\x5', '&', '\x14', '\x2', '\x8E', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x90', '\x93', '\x5', '\x16', '\f', 
		'\x2', '\x91', '\x93', '\x5', '\x18', '\r', '\x2', '\x92', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x94', '\x96', '\x5', '\b', '\x5', 
		'\x2', '\x95', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', 
		'\x5', '\x2', '\x2', '\x9B', '\xA5', '\a', '!', '\x2', '\x2', '\x9C', 
		'\x9D', '\a', '\x15', '\x2', '\x2', '\x9D', '\xA2', '\x5', '\x4', '\x3', 
		'\x2', '\x9E', '\x9F', '\a', '\x14', '\x2', '\x2', '\x9F', '\xA1', '\x5', 
		'\x4', '\x3', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAB', '\a', 
		'\x17', '\x2', '\x2', '\xA8', '\xAA', '\x5', '*', '\x16', '\x2', '\xA9', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', '\x18', '\x2', 
		'\x2', '\xAF', '\x17', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB2', '\x5', 
		'\b', '\x5', '\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\a', '\x6', '\x2', '\x2', '\xB7', '\xB8', '\a', '!', '\x2', '\x2', 
		'\xB8', '\xBC', '\a', '\x17', '\x2', '\x2', '\xB9', '\xBB', '\x5', ',', 
		'\x17', '\x2', '\xBA', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', 
		'\a', '\x18', '\x2', '\x2', '\xC0', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xC3', '\x5', '\b', '\x5', '\x2', '\xC2', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC8', '\x5', '\x4', '\x3', '\x2', '\xC8', '\xC9', 
		'\a', '!', '\x2', '\x2', '\xC9', '\xCA', '\x5', '.', '\x18', '\x2', '\xCA', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x5', '$', '\x13', 
		'\x2', '\xCC', '\xCD', '\x5', '\xE', '\b', '\x2', '\xCD', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xD0', '\x5', '\b', '\x5', '\x2', '\xCF', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD6', '\x5', '\x4', '\x3', 
		'\x2', '\xD5', '\xD7', '\a', '\t', '\x2', '\x2', '\xD6', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDB', '\a', '!', '\x2', 
		'\x2', '\xD9', '\xDA', '\a', '\x1D', '\x2', '\x2', '\xDA', '\xDC', '\x5', 
		'\x12', '\n', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDE', '\x5', '\x4', '\x3', '\x2', '\xDE', '\xE1', '\a', 
		'!', '\x2', '\x2', '\xDF', '\xE0', '\a', '\x1D', '\x2', '\x2', '\xE0', 
		'\xE2', '\x5', '\x12', '\n', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE4', '\x5', '$', '\x13', '\x2', '\xE4', 
		'\xE5', '\a', '\x1D', '\x2', '\x2', '\xE5', '\xE6', '\x5', '\x12', '\n', 
		'\x2', '\xE6', '#', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xEB', '\b', 
		'\x13', '\x1', '\x2', '\xE8', '\xE9', '\x5', '\x4', '\x3', '\x2', '\xE9', 
		'\xEA', '\a', '\x13', '\x2', '\x2', '\xEA', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', 
		'\xF2', '\a', '!', '\x2', '\x2', '\xEE', '\xEF', '\a', '\x1B', '\x2', 
		'\x2', '\xEF', '\xF0', '\x5', '\x12', '\n', '\x2', '\xF0', '\xF1', '\a', 
		'\x1C', '\x2', '\x2', '\xF1', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF9', '\a', 
		'!', '\x2', '\x2', '\xF5', '\xF6', '\a', '\x1B', '\x2', '\x2', '\xF6', 
		'\xF7', '\x5', '\x12', '\n', '\x2', '\xF7', '\xF8', '\a', '\x1C', '\x2', 
		'\x2', '\xF8', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xFE', '\f', '\x4', '\x2', '\x2', '\xFE', 
		'\xFF', '\a', '\x13', '\x2', '\x2', '\xFF', '\x101', '\x5', '$', '\x13', 
		'\x5', '\x100', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x101', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x103', '\x3', '\x2', '\x2', '\x2', '\x103', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', 
		'\a', '\b', '\x2', '\x2', '\x106', '\x107', '\x5', '\x4', '\x3', '\x2', 
		'\x107', '\x108', '\a', '\x1B', '\x2', '\x2', '\x108', '\x109', '\x5', 
		'\x12', '\n', '\x2', '\x109', '\x10A', '\a', '\x1C', '\x2', '\x2', '\x10A', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\a', '\b', '\x2', 
		'\x2', '\x10C', '\x10D', '\x5', '\x4', '\x3', '\x2', '\x10D', '\x10E', 
		'\a', '\x1B', '\x2', '\x2', '\x10E', '\x10F', '\a', '\x1C', '\x2', '\x2', 
		'\x10F', '\x110', '\a', '\x17', '\x2', '\x2', '\x110', '\x115', '\x5', 
		'\x12', '\n', '\x2', '\x111', '\x112', '\a', '\x14', '\x2', '\x2', '\x112', 
		'\x114', '\x5', '\x12', '\n', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x117', '\x3', '\x2', '\x2', '\x2', '\x115', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x118', '\x3', '\x2', '\x2', '\x2', '\x117', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x119', '\a', '\x1C', '\x2', '\x2', '\x119', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '\x11E', '\a', '\a', '\x2', '\x2', '\x11D', 
		'\x11F', '\x5', '\x12', '\n', '\x2', '\x11E', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x11F', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x120', '\x121', '\x5', '\x1E', '\x10', '\x2', '\x121', 
		'\x122', '\a', '\x16', '\x2', '\x2', '\x122', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x125', '\x5', '\x1A', '\xE', '\x2', '\x124', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '+', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x5', '\x1E', 
		'\x10', '\x2', '\x127', '\x128', '\a', '\x16', '\x2', '\x2', '\x128', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12B', '\x5', '\x1A', 
		'\xE', '\x2', '\x12A', '\x126', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12D', '\x5', '\n', '\x6', '\x2', '\x12D', '\x12E', '\a', ' ', 
		'\x2', '\x2', '\x12E', '\x12F', '\x5', '\x12', '\n', '\x2', '\x12F', '\x130', 
		'\a', '\x16', '\x2', '\x2', '\x130', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x132', '\x5', '\n', '\x6', '\x2', '\x132', '\x136', '\a', '\x17', 
		'\x2', '\x2', '\x133', '\x135', '\x5', '\x10', '\t', '\x2', '\x134', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'\x136', '\x134', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x139', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\a', '\x18', '\x2', 
		'\x2', '\x13A', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '/', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\t', '\x3', 
		'\x2', '\x2', '\x13E', '\x31', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', 
		'\a', '#', '\x2', '\x2', '\x140', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x142', '\t', '\x4', '\x2', '\x2', '\x142', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '%', ':', '=', '@', 'H', 'P', '_', '\x62', 'o', 'r', '\x82', 
		'\x8E', '\x92', '\x97', '\xA2', '\xA5', '\xAB', '\xB3', '\xBC', '\xC4', 
		'\xD1', '\xD6', '\xDB', '\xE1', '\xEB', '\xF2', '\xF9', '\xFB', '\x102', 
		'\x115', '\x11A', '\x11E', '\x124', '\x12A', '\x136', '\x13B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MarlinCompiler.Antlr
