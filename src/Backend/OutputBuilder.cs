using System.Text;
using MarlinCompiler.Common;
using MarlinCompiler.Common.AbstractSyntaxTree;

namespace MarlinCompiler.Backend;

/// <summary>
/// This class manages the LLVM IR generation for Marlin programs.
/// Note - called OutputBuilder to not be confused with LLVM's Builder classes
/// </summary>
public sealed partial class OutputBuilder
{
    public OutputBuilder(ContainerNode root, string outPath)
    {
        _root = root;
        _outPath = outPath;
        _currentStringBuilder = null!;
        MessageCollection = new MessageCollection();
    }

    private readonly ContainerNode _root;
    private readonly string _outPath;
    private StringBuilder _currentStringBuilder;
    private int _currentTabLevel;

    /// <summary>
    /// LLVM compilation messages.
    /// </summary>
    public MessageCollection MessageCollection { get; }

    public void Build()
    {
        Dictionary<string, StringBuilder> modules = new();
        foreach (Node node in _root)
        {
            CompilationUnitNode unit = (CompilationUnitNode) node;
            StringBuilder moduleBuilder = CreateModuleBuilder(unit.FullName);
            modules.Add(unit.FullName, moduleBuilder);
            _currentStringBuilder = moduleBuilder;
            Visit(unit);
        }
        
        string useOutPath = _outPath;
        if (Directory.Exists(useOutPath))
        {
            new DirectoryInfo(useOutPath).Delete(true);
        }
        else if (File.Exists(useOutPath))
        {
            useOutPath = Path.GetDirectoryName(useOutPath) ?? useOutPath;
        }
        Directory.CreateDirectory(useOutPath);
        
        foreach ((string name, StringBuilder file) in modules)
        {
            string path = Path.Combine(useOutPath, name.Replace("::", "_"));
            File.WriteAllText($"{path}.cs", file.ToString());
        }
    }

    private void Emit(string line, bool addNewLine)
    {
        if (addNewLine)
        {
            _currentStringBuilder.AppendLine($"{GetSpacing()}{line}");
        }
        else
        {
            _currentStringBuilder.Append($"{GetSpacing()}{line}");
        }
    }

    private void OpenScope()
    {
        Emit("{", true);
        _currentTabLevel++;
    }

    private void CloseScope()
    {
        _currentTabLevel--;
        Emit("}", true);
        Emit("", true);
    }

    private string GetSpacing() => new(' ', _currentTabLevel * 4);

    private StringBuilder CreateModuleBuilder(string modName)
    {
        StringBuilder builder = new();
        builder.AppendLine("// Auto-generated by Marlin compiler");
        builder.AppendLine();
        builder.AppendLine($"namespace {modName};");
        builder.AppendLine();

        return builder;
    }
}